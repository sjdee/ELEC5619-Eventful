package au.edu.usyd.elec5619.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import au.edu.usyd.elec5619.domain.Comment;
import au.edu.usyd.elec5619.domain.Event;
import au.edu.usyd.elec5619.domain.Post;
import au.edu.usyd.elec5619.domain.User;

@Service(value="postDao")
public class PostDaoImpl implements PostDao {

	@PersistenceContext
	private EntityManager entityManager;
	
	@Override
	public void createPost(Post post) {
		
		entityManager.persist(post);
		//sessionFactory.getCurrentSession().save(post);
		
	}
	
	@Override
	public void incrementNumPosts(int eventId) {
		
		String hql = "UPDATE Event e set e.numPosts = e.numPosts + 1 WHERE e.id = :id";
				
		Query query = entityManager.createQuery(hql);
		
		query.setParameter("id", String.valueOf(eventId));
		
		query.executeUpdate();
						
	}
	
	@Override
	public void incrementNumComments(int postId) {
		
		String hql = "UPDATE Post p set p.numComments = p.numComments + 1 WHERE p.id = :id";
		
		Query query = entityManager.createQuery(hql);
		
		query.setParameter("id", String.valueOf(postId));
		
		query.executeUpdate();
						
	}
	
	@Override
	public void createComment(Comment comment) {
				
		entityManager.persist(comment);
		
	}

	@Override
	public boolean getUserLikedComment(int commentId, long userId) {
		
		String likesQuery = "FROM Comment c JOIN c.likedUsers u WHERE c.id = :commentId and u.id = :userId";
		
		Query likeQuery = entityManager.createQuery(likesQuery);
		likeQuery.setParameter("commentId", String.valueOf(commentId));
		likeQuery.setParameter("userId", String.valueOf(1));
		
		// If we have already liked the post, return true
		return (likeQuery.getResultList().size() != 0);
	}
	
	@Override
	public void incrementNumCommentLikes(int commentId) {
		// TODO Auto-generated method stub
		
		
		
		Comment comment = entityManager.find(Comment.class, commentId);
		
		String hql = "UPDATE Comment c set c.numLikes = c.numLikes + 1 WHERE c.id = :id";
				
		Query query = session.createQuery(hql);
		
		query.setString("id", String.valueOf(commentId));
		
		query.executeUpdate();
	}

	@Override
	public void saveCommentLike(int commentId, long userId) {
		Session session = sessionFactory.getCurrentSession();		

		Comment comment = (Comment) session.get(Comment.class, commentId);
		User user = (User) session.get(User.class, userId);
		
		System.out.println("user is " + user.email);
		
		user.getLikedComments().add(comment);
		
		session.save(user);
	}

	@Override
	public void savePostLike(int postId, long userId) {
		Session session = sessionFactory.getCurrentSession();		

		Post post = (Post) session.get(Post.class, postId);
		User user = (User) session.get(User.class, userId);
				
		user.getLikedPosts().add(post);
		
		session.save(user);
	}
	
	@Override
	public void incrementNumPostLikes(int postId) {
		Session session = sessionFactory.getCurrentSession();		
				
		String hql = "UPDATE Post p set p.numLikes = p.numLikes + 1 WHERE p.id = :id";
		
		Query query = session.createQuery(hql);
		
		query.setString("id", String.valueOf(postId));
		
		query.executeUpdate();
		
	}
	
	@Override
	public boolean getUserLikedPost(int postId, long userId) {
		Session session = sessionFactory.getCurrentSession();		
		
		String likesQuery = "FROM Post p JOIN p.likedUsers u WHERE p.id = :postId and u.id = :userId";
		
		Query likeQuery = session.createQuery(likesQuery);
		likeQuery.setString("postId", String.valueOf(postId));
		likeQuery.setString("userId", String.valueOf(1));
		
		// If we have already liked the post
		return (likeQuery.list().size() != 0);
	}
	
	@Override
	public Post getPostById(int id) {
		Session session = sessionFactory.getCurrentSession();		
		Post post = (Post) session.get(Post.class, id);
				
		return post;
	}
	
	@Override
	public Comment getCommentById(int id) {
		Session session = sessionFactory.getCurrentSession();		
		Comment comment = (Comment) session.get(Comment.class, id);
				
		return comment;
	}
	
}
